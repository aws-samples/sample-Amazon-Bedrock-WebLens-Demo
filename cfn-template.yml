AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  CustomerName:
    Type: String
    Description: The name of the customer.
  ScrapeUrls:
    Type: String
    Description: URLs to be scraped.
  CustomerLogoUrl:
    Type: String
    Description: URL of the customer's logo.
  CustomerFaviconUrl:
    Type: String
    Description: URL of the customer's favicon.
  CustomerIndustry:
    Type: String
    Description: The industry of the customer.

Resources:
  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: FullAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: '*'
                Resource: '*'
  MyCodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub '${CustomerName}-CodeBuildProject'
      ServiceRole: !GetAtt 'CodeBuildServiceRole.Arn'
      Artifacts:
        Type: NO_ARTIFACTS
      Source:
        Type: NO_SOURCE
        BuildSpec: |
          version: 0.2
          phases:
            pre_build:
              commands:
                - cd /app
                - |
                  echo '{
                    "scrapeUrls": ["'$SCRAPE_URLS'"],
                    "customerName": "'$CUSTOMER_NAME'",
                    "customerLogo": "'$CUSTOMER_LOGO_URL'",
                    "customerFavicon": "'$CUSTOMER_FAVICON_URL'",
                    "customerIndustry": "'$CUSTOMER_INDUSTRY'"
                  }' > cdk.context.json
                - cat cdk.context.json
            build:
              commands:
                - npm install
                - npx cdk bootstrap
                - npx cdk deploy --all --require-approval never
          artifacts:
            files:
              - '**/*'
          cache:
            paths:
              - 'node_modules/**/*'
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: public.ecr.aws/z6v3b4o4/gaitd
        EnvironmentVariables:
          - Name: CUSTOMER_NAME
            Value: !Ref CustomerName
          - Name: SCRAPE_URLS
            Value: !Ref ScrapeUrls
          - Name: CUSTOMER_LOGO_URL
            Value: !Ref CustomerLogoUrl
          - Name: CUSTOMER_FAVICON_URL
            Value: !Ref CustomerFaviconUrl
          - Name: CUSTOMER_INDUSTRY
            Value: !Ref CustomerIndustry

  CodeBuildTrigger:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt 'TriggerLambdaFunction.Arn'
      ProjectName: !Ref MyCodeBuildProject

  TriggerLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${CustomerName}-TriggerCodeBuildFunction'
      Handler: index.handler
      Role: !GetAtt 'LambdaExecutionRole.Arn'
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          const codebuild = new AWS.CodeBuild();

          exports.handler = async (event, context) => {
            if (event.RequestType === 'Delete') {
              // Optionally handle stack deletion
              return;
            }

            const projectName = event.ResourceProperties.ProjectName;
            const params = {
              projectName,
            };

            await codebuild.startBuild(params).promise();
          };
      Runtime: nodejs14.x

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: TriggerCodeBuildPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - codebuild:StartBuild
                Resource: !GetAtt 'MyCodeBuildProject.Arn'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'